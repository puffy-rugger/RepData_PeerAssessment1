}
#Create a new dataset that is equal to the original dataset but with the missing
#data filled in.
##Are there differences in activity patterns between weekdays and weekends?
#Create a new factor variable in the dataset with two levels – “weekday”
#and “weekend” indicating whether a given date is a weekday or weekend day.
#Make a panel plot containing a time series plot (i.e. type = "l") of the
#5-minute interval (x-axis) and the average number of steps taken, averaged
#across all weekday days or weekend days (y-axis).
#See the README file in the GitHub repository to see an example of what this
#plot should look like using simulated data.
15 %% 60
60 %% 60
65 %% 60
dt
m <- dt$interval %% 60
m
m/5
?mutate
dtt <- mutate(dt, bin = (dt$interval %% 60)/2
)
library(dplyr)
dtt <- mutate(dt, bin = (dt$interval %% 60)/2)
dtt
head(dtt)
dtt <- mutate(dt, bin = (dt$interval %% 60))
head(dtt)
head(dtt, 20)
aggregate(bin ~ steps, dtt)
aggregate(bin ~ steps, dtt, mean)
head(aggregate(bin ~ steps, dtt, mean))
dtt
head(dtt, 20)
head(aggregate(steps ~ bin, dtt, mean), 20)
aggregate(steps ~ bin, dtt, mean)
head(dt, 25)
nas <- which(is.na(dt$steps))
dtt <- mutate(dt, bin = (dt$steps %% 60)/5)
means <- aggregate(steps ~ bin, dtt, mean)
for (t in nas) {
#dt$steps[n] <-
dt$steps[t] <- means$steps[dtt$bin[t]]
cat ("t = ", t, " dt$date = ", dt$date[t], "\n")
}
head(dt, 25)
t
dt$steps[t]
dtt$bin[t]
dtt[t]
dtt[t,]
nas <- which(is.na(dt$steps))
dtt <- mutate(dt, bin = (dt$interval %% 60)/5)
means <- aggregate(steps ~ bin, dtt, mean)
for (t in nas) {
#dt$steps[n] <-
dt$steps[t] <- means$steps[dtt$bin[t]]
cat ("t = ", t, " dt$date = ", dt$date[t], "\n")
}
dtt[t,]
t
dtt[t,]
dtt[t]
head(dtt[t])
dtt <- mutate(dt, bin = (dt$interval %% 60)/5)
dtt
head(dtt)
means <- aggregate(steps ~ bin, dtt, mean)
for (t in nas) {
#dt$steps[n] <-
dt$steps[t] <- means$steps[dtt$bin[t]]
cat ("t = ", t, " dt$date = ", dt$date[t], "\n")
}
dtt$bin[t]
t
dtt$bin[t]
dtt <- mutate(dt, bin = ((dt$interval %% 60)/5)+1)
dtt
head(dtt, 25)
dtt$bin[t]
means$steps[dtt$bin[t]]
for (t in nas) {
#dt$steps[n] <-
dt$steps[t] <- means$steps[dtt$bin[t]]
cat ("t = ", t, " dt$date = ", dt$date[t], "\n")
}
sum(is.na(dt$steps))
dtt
dt
dt[t]
dt[t,]
head(dt)
sum(is.na(dt$steps))
dt$steps
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
nas <- which(is.na(dt$steps))
dtt <- mutate(dt, bin = ((dt$interval %% 60)/5)+1)
means <- aggregate(steps ~ bin, dtt, mean)
for (t in nas) {
#dt$steps[n] <-
dt$steps[t] <- means$steps[dtt$bin[t]]
cat ("t = ", t, " dtt$bin = ", dtt$bin[t], "\n")
}
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
nas <- which(is.na(dt$steps))
nas
dtt <- mutate(dt, bin = ((dt$interval %% 60)/5)+1)
means <- aggregate(steps ~ bin, dtt, mean)
for (t in nas) {
#dt$steps[n] <-
dt$steps[t] <- means$steps[dtt$bin[t]]
#cat ("t = ", t, " dtt$bin = ", dtt$bin[t], "\n")
}
dtt$bin[9025]
means$steps[5]
dt$steps[9025]
dt$steps[9877]
dt$steps[nas]
dt
nas
dt$steps[1]
dt$steps[2]
head(dt)
head(dt)
dt
dt
plot(dt)
hist(dt$date, dt$steps)
?hist
hist(dt$steps)
dt[dt$steps == 0]
dt[dt$steps == 0,]
summary(dt[dt$steps == 0,])
table(dt)
names(dt)
dt
dt[289]
dt[289,]
dt <- read.csv("../activity.csv")
dt[289,]
dt[dt$steps == 0,]
is.na(dt$steps)
dt[is.na(dt$steps),]
is.na(dt$steps)
is.na(dt$steps) == TRUR
is.na(dt$steps) == TRUE
hist(dt$steps)
dt <- read.csv("../activity.csv")
hist(dt$steps)
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(dt$steps)
hist(totalsteps$steps)
hist(totalsteps$steps, breaks = 20)
abline(v = mean(totalsteps$steps))
abline(v = mean(totalsteps$steps), col = "blue")
abline(v = mean(totalsteps$steps), col = "red")
abline(v = median(totalsteps$steps), col = "green")
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
hist(dt$steps, breaks = 20)
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps, breaks = 20)
totalsteps <- aggregate(steps ~ date, dtt, sum)
hist(totalsteps$steps, breaks = 20)
?compare_tbls
dt == dtt
dt
dtt
dt
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps, breaks = 20)
mean(totalsteps$steps)
median(totalsteps$steps)
mean(totalsteps$steps) - median(totalsteps$steps)
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
nas <- which(is.na(dt$steps))
nas
dtt <- mutate(dt, bin = ((dt$interval %% 60)/5)+1)
means <- aggregate(steps ~ bin, dtt, mean)
for (t in nas) {
dt$steps[t] <- means$steps[dtt$bin[t]]
}
#Create a new dataset that is equal to the original dataset but with the missing
#data filled in.
#Make a histogram of the total number of steps taken each day and Calculate and
#report the mean and median total number of steps taken per day. Do these values
#differ from the estimates from the first part of the assignment? What is the
#impact of imputing missing data on the estimates of the total daily number
#of steps?
par(mfrow = c(1,2))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps, breaks = 20)
abline(v = mean(totalsteps$steps), col = "green", lwd = 1)
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps, breaks = 20)
abline(v = median(totalsteps$steps), col = "blue", lwd = 1)
par(mfrow = c(1,1))
par(mfrow = c(1,2))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps, breaks = 20, main = "Total Steps taken per day (Mean)", xlab = "Steps")
abline(v = mean(totalsteps$steps), col = "green", lwd = 2)
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps, breaks = 20, main = "Total Steps taken per day (Median)", xlab = "Steps")
abline(v = median(totalsteps$steps), col = "blue", lwd = 2)
par(mfrow = c(1,1))
?abline
?hist
par(mfrow = c(1,2))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Mean)",
xlab = "Steps",
col = "lightgreen")
abline(v = mean(totalsteps$steps), col = "green", lwd = 2)
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Median)",
xlab = "Steps",
col = "lightblue")
abline(v = median(totalsteps$steps), col = "blue", lwd = 2)
par(mfrow = c(1,1))
par(mfrow = c(1,2))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Mean)",
xlab = "Steps",
col = "lightgreen",
border = "green")
abline(v = mean(totalsteps$steps), lwd = 2)
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Median)",
xlab = "Steps",
col = "lightblue",
border = "blue")
abline(v = median(totalsteps$steps), lwd = 2)
par(mfrow = c(1,1))
par(mfrow = c(1,2))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Mean)",
xlab = "Steps",
col = "lightgreen",
border = "green")
abline(v = mean(totalsteps$steps))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Median)",
xlab = "Steps",
col = "lightblue",
border = "blue")
abline(v = median(totalsteps$steps))
par(mfrow = c(1,1))
par(mfrow = c(2,1))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Mean)",
xlab = "Steps",
col = "lightgreen",
border = "green")
abline(v = mean(totalsteps$steps))
totalsteps <- aggregate(steps ~ date, dt, sum)
hist(totalsteps$steps,
breaks = 20,
main = "Total Steps taken per day (Median)",
xlab = "Steps",
col = "lightblue",
border = "blue")
abline(v = median(totalsteps$steps))
par(mfrow = c(1,1))
weekdays("2012-10-01")
weekdays(as.Date("2012-10-01"), "Y%m%d")
as.Date("2012-10-01"), "Y%m%d"
as.Date("2012-10-01", "Y%m%d")
as.Date("2012-10-01", "%Y%m%d")
as.Date("2012-10-01", "%Y-%m-%d")
weekdays(as.Date("2012-10-01", "%Y-%m-%d"))
f <- as.factor("Weekday", "weekend")
?as.factor
f <- as.factor(c("Weekday", "weekend"))
f
f
f("weekend")
factor(f)
factor("weekend")
names(dt)
dtt <- mutate(dtt, day = weekdays(dtt$date))
dtt
dtt$day
dtt$day[dtt$day == "Saturday" | dtt$day == "Sunday"] <- factor("weekend")
dtt$day[(dtt$day == "Saturday" | dtt$day == "Sunday")] <- factor("weekday")
dtt$day
dtt$day[dtt$day == "Saturday" | dtt$day == "Sunday"] <- factor("weekend")
unique(dtt$day)
dtt$day[!(dtt$day == "Saturday" | dtt$day == "Sunday")] <- factor("weekday")
unique(dtt$day)
factor("weekend")
factor("weekday")
mutate(dtt, -dtt$day)
levels(f)
rm(list = c("dtt"))
rm(list = c("m"))
rm(list = c("f"))
rm(list = c("g"))
head(dt)
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
dt
?as.factor
?factor
dt$x[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"]
dt$x <- ""
dt
head(dt)
dt$x[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <- "weekday"
head(dt, 25)
dt$x[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <- "weekend"
dt$x[!(weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday")] <- "weekday"
dt
dt$x <- as.factor(dt$x)
summary(dt)
summary(dt$x)
factor(dt$x)
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
dt$day <- ""
dt$day[!(weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday")] <-
"weekday"
dt$day[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <-
"weekend"
dt$day <- as.Factor(dt$day)
dt$day <- as.factor(dt$day)
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
dt$day <- ""
dt$day[!(weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday")] <-
"weekday"
dt$day[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <-
"weekend"
dt$day <- as.factor(dt$day)
summary(dt)
z <- aggregate(steps ~ interval + day, dt, mean)
z
xyplot(z)
names(z)
xyplot(steps ~ interval)
xyplot(steps ~ interval, dt)
xyplot(steps ~ interval + day, dt)
xyplot(steps ~ interval | day, dt)
?xyplot
xyplot(steps ~ interval | day, dt, type = "l")
xyplot(steps ~ interval | day, dt, type = "l", layout = c(1,2))
xyplot(steps ~ interval | day, z, type = "l", layout = c(1,2))
xyplot(steps ~ interval | day, z, type = "l", layout = c(1,2))
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
dt$day <- ""
dt$day[!(weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday")] <-
"weekday"
dt$day[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <-
"weekend"
dt$day <- as.factor(dt$day)
#Make a panel plot containing a time series plot (i.e. type = "l") of the
#5-minute interval (x-axis) and the average number of steps taken, averaged
#across all weekday days or weekend days (y-axis).
#See the README file in the GitHub repository to see an example of what this
#plot should look like using simulated data.
dtt <- aggrgate(steps ~ interval + day, dt, mean)
xyplot(steps ~ interval | day,
dtt,
type = "l",
layout = c(1,2),
main = "Average number of steps taken (Weeday vs Weekend",
xlab = "Interval",
ylab = "Steps",
col = "blue")
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
dt$day <- ""
dt$day[!(weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday")] <-
"weekday"
dt$day[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <-
"weekend"
dt$day <- as.factor(dt$day)
#Make a panel plot containing a time series plot (i.e. type = "l") of the
#5-minute interval (x-axis) and the average number of steps taken, averaged
#across all weekday days or weekend days (y-axis).
#See the README file in the GitHub repository to see an example of what this
#plot should look like using simulated data.
dtt <- aggregate(steps ~ interval + day, dt, mean)
xyplot(steps ~ interval | day,
dtt,
type = "l",
layout = c(1,2),
main = "Average number of steps taken (Weeday vs Weekend",
xlab = "Interval",
ylab = "Steps",
col = "blue")
dtt <- aggregate(steps ~ interval + day, dt, mean)
xyplot(steps ~ interval | day,
dtt,
type = "l",
layout = c(1,2),
main = "Average number of steps taken (Weeday vs Weekend)",
xlab = "Interval",
ylab = "Steps",
col = "blue")
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
dt$day <- ""
dt$day[!(weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday")] <-
"Weekday"
dt$day[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <-
"Weekend"
dt$day <- as.factor(dt$day)
#Make a panel plot containing a time series plot (i.e. type = "l") of the
#5-minute interval (x-axis) and the average number of steps taken, averaged
#across all weekday days or weekend days (y-axis).
#See the README file in the GitHub repository to see an example of what this
#plot should look like using simulated data.
dtt <- aggregate(steps ~ interval + day, dt, mean)
xyplot(steps ~ interval | day,
dtt,
type = "l",
layout = c(1,2),
main = "Average number of steps taken (Weeday vs Weekend)",
xlab = "Interval",
ylab = "Steps",
col = "blue")
dtt <- aggregate(steps ~ interval + day, dt, mean, na.rm = TRUE)
xyplot(steps ~ interval | day,
dtt,
type = "l",
layout = c(1,2),
main = "Average number of steps taken (Weeday vs Weekend)",
xlab = "Interval",
ylab = "Steps",
col = "blue")
?xyplot
dt <- read.csv("../activity.csv")
dt$date <- as.Date(dt$date, "%Y-%m-%d")
dt$day <- ""
dt$day[!(weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday")] <-
"Weekday"
dt$day[weekdays(dt$date) == "Saturday" | weekdays(dt$date) == "Sunday"] <-
"Weekend"
dt$day <- as.factor(dt$day)
#Make a panel plot containing a time series plot (i.e. type = "l") of the
#5-minute interval (x-axis) and the average number of steps taken, averaged
#across all weekday days or weekend days (y-axis).
#See the README file in the GitHub repository to see an example of what this
#plot should look like using simulated data.
dtt <- aggregate(steps ~ interval + day, dt, mean, na.rm = TRUE)
xyplot(steps ~ interval | day,
dtt,
type = "l",
layout = c(1,2),
main = "Average number of steps taken (Weeday vs Weekend)",
xlab = "Interval",
ylab = "Steps",
col = "blue")
g <- ggplot(dtt, aes(steps, interval))
g <- g + facet_grid(day)
print(g)
names(dtt)
g <- ggplot(dtt, aes(steps, interval))
g <- g + facet_grid(. ~day)
print(g)
g <- ggplot(dtt, aes(steps, interval))
g <- g +
facet_grid(. ~day) +
geom_line()
print(g)
xyplot(steps ~ interval | day,
dtt,
type = "l",
layout = c(1,2),
main = "Average number of steps taken (Weeday vs Weekend)",
xlab = "Interval",
ylab = "Steps",
col = "blue")
g <- ggplot(dtt, aes(steps, interval))
g <- g +
facet_grid(. ~day) +
geom_line()
print(g)
g <- ggplot(dtt, aes(interval, steps))
g <- g +
facet_grid(. ~day) +
geom_line()
print(g)
g <- ggplot(dtt, aes(interval, steps))
g <- g +
facet_grid(. ~day) +
geom_line(color = "x0000FF") +
theme_light()
print(g)
g <- ggplot(dtt, aes(interval, steps))
g <- g +
facet_grid(. ~day) +
geom_line(color = "steelblue") +
theme_light()
print(g)
